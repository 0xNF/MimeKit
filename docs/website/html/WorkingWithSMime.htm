<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Working with S/MIME</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="WorkingWithSMime" /><meta name="Description" content="Before you can begin using MimeKit's S/MIME support, you will need to decide which database to use for certificate storage." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MimeKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Introduction.htm" title="MimeKit Documentation" tocid="roottoc">MimeKit Documentation</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="Introduction.htm" title="Introduction" tocid="Introduction">Introduction</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="GettingStarted.htm" title="Getting Started" tocid="GettingStarted">Getting Started</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="CreatingMessages.htm" title="Creating Messages" tocid="CreatingMessages">Creating Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="ParsingMessages.htm" title="Parsing Messages" tocid="ParsingMessages">Parsing Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithMessages.htm" title="Working with Messages" tocid="WorkingWithMessages">Working with Messages</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithPGP.htm" title="Working with OpenPGP" tocid="WorkingWithPGP">Working with OpenPGP</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="WorkingWithSMime.htm" title="Working with S/MIME" tocid="WorkingWithSMime">Working with S/MIME</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn">Working with S/MIME</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#CreatingYourOwnSMimeContext">Creating your own S/MIME Context</a></li><li class="outlineSectionEntry"><a href="#Encrypt">Encrypting Messages with S/MIME</a></li><li class="outlineSectionEntry"><a href="#Decrypt">Decrypting S/MIME Messages</a></li><li class="outlineSectionEntry"><a href="#Sign">Digitally Signing Messages using S/MIME</a></li><li class="outlineSectionEntry"><a href="#Verify">Verifying S/MIME Digital Signatures</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion" id="CreatingYourOwnSMimeContext"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating your own S/MIME Context</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Before you can begin using MimeKit's S/MIME support, you will need to decide which
          database to use for certificate storage.
        </p><p>
          If you are targetting any of the <strong>Xamarin</strong> platforms
          (or Linux), you won't need to do anything (although you certianly can if you want to)
          because, by default, MimeKit will automatically use the
          <strong>Mono.Data.Sqlite</strong> binding to
          <a href="https://www.sqlite.org/" target="_blank">SQLite</a>.
        </p><p>
          If you are, however, on any of the <strong>Windows</strong> platforms,
          you'll need to pick a <a href="http://msdn2.microsoft.com/en-us/library/ax3wd0k9" target="_blank">System.Data</a>
          provider such as
          <a href="https://www.nuget.org/packages/System.Data.SQLite" target="_blank">System.Data.SQLite</a>. Once you've made your choice and installed it (via NuGet or however),
          you'll need to implement your own
          <a href="T_MimeKit_Cryptography_SecureMimeContext.htm">SecureMimeContext</a>
          subclass. Luckily, it's very simple to do. Assuming you've chosen
          <strong>System.Data.SQLite</strong>, here's how you'd implement your own
          <a href="T_MimeKit_Cryptography_SecureMimeContext.htm">SecureMimeContext</a>
          class:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">class</span> MySecureMimeContext : DefaultSecureMimeContext
{
    <span class="highlight-keyword">public</span> MySecureMimeContext ()
        : <span class="highlight-keyword">base</span> (OpenDatabase (<span class="highlight-literal">"C:\\wherever\\certdb.sqlite"</span>))
    {
    }

    <span class="highlight-keyword">static</span> IX509CertificateDatabase OpenDatabase (<span class="highlight-keyword">string</span> fileName)
    {
        <span class="highlight-keyword">var</span> builder = <span class="highlight-keyword">new</span> SQLiteConnectionStringBuilder ();
        builder.DateTimeFormat = SQLiteDateFormats.Ticks;
        builder.DataSource = fileName;

        <span class="highlight-keyword">if</span> (!File.Exists (fileName))
            SQLiteConnection.CreateFile (fileName);

        <span class="highlight-keyword">var</span> sqlite = <span class="highlight-keyword">new</span> SQLiteConnection (builder.ConnectionString);
        sqlite.Open ();

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> SqliteCertificateDatabase (sqlite, <span class="highlight-literal">"password"</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAFAAA");</script><p>
          To register your class, you can use the following code snippet:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">CryptographyContext.Register (<span class="highlight-keyword">typeof</span> (MySecureMimeContext));</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAFAAA");</script><p>
          Now you are ready to encrypt, decrypt, sign and verify messages using S/MIME!
        </p></div><div class="collapsibleAreaRegion" id="Encrypt"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Encrypting Messages with S/MIME</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          S/MIME uses a MIME part with an <span class="literal">application/pkcs7-mime</span> mime-type
          to encapsulate encrypted content (as well as other things). To encrypt any
          <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a>,
          simply use the
          <span class="nolink">ApplicationPkcs7Mime.Encrypt</span>
          method:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> joey = <span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Joey"</span>, <span class="highlight-literal">"joey@friends.com"</span>);
<span class="highlight-keyword">var</span> alice = <span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Alice"</span>, <span class="highlight-literal">"alice@wonderland.com"</span>);

<span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
message.From.Add (joey);
message.To.Add (alice);
message.Subject = <span class="highlight-literal">"How you doin?"</span>;

<span class="highlight-comment">// create our message body (perhaps a multipart/mixed with the message text and some</span>
<span class="highlight-comment">// image attachments, for example)</span>
<span class="highlight-keyword">var</span> body = CreateMessageBody ();

<span class="highlight-comment">// now to encrypt our message body using our custom S/MIME cryptography context</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MySecureMimeContext ()) {
    <span class="highlight-comment">// Note: this assumes that "Alice" has an S/MIME certificate with an X.509</span>
    <span class="highlight-comment">// Subject Email identifier that matches her email address. If she doesn't,</span>
    <span class="highlight-comment">// try using a SecureMailboxAddress which allows you to specify the</span>
    <span class="highlight-comment">// fingerprint of her certificate to use for lookups.</span>
    message.Body = ApplicationPkcs7Mime.Encrypt (ctx, message.To.Mailboxes, body);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAEAAA");</script></div><div class="collapsibleAreaRegion" id="Decrypt"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Decrypting S/MIME Messages</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          As mentioned earlier, S/MIME uses an <span class="literal">application/pkcs7-mime</span> part with
          an <span class="literal">smime-type</span> parameter with a value of <span class="literal">enveloped-data</span>
          to encapsulate the encrypted content.
        </p><p>
          The first thing you must do is find the
          <a href="T_MimeKit_Cryptography_ApplicationPkcs7Mime.htm">ApplicationPkcs7Mime</a>
          part (see the section on <a href="WorkingWithMessages.htm#TraversingMessages">Working with Messages</a>).
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (entity <span class="highlight-keyword">is</span> ApplicationPkcs7Mime) {
    <span class="highlight-keyword">var</span> pkcs7 = (ApplicationPkcs7Mime) entity;

    <span class="highlight-keyword">if</span> (pkcs7.SecureMimeType == SecureMimeType.EnvelopedData)
        <span class="highlight-keyword">return</span> pkcs7.Decrypt ();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="Sign"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Digitally Signing Messages using S/MIME</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          S/MIME uses a MIME part with a <span class="literal">multipart/signed</span> mime-type to
          contain the signed content and the detached signature data.
        </p><p>
          Here's how you might digitally sign a message using S/MIME:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> joey = <span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Joey"</span>, <span class="highlight-literal">"joey@friends.com"</span>);
<span class="highlight-keyword">var</span> alice = <span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Alice"</span>, <span class="highlight-literal">"alice@wonderland.com"</span>);

<span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
message.From.Add (joey);
message.To.Add (alice);
message.Subject = <span class="highlight-literal">"How you doin?"</span>;

<span class="highlight-comment">// create our message body (perhaps a multipart/mixed with the message text and some</span>
<span class="highlight-comment">// image attachments, for example)</span>
<span class="highlight-keyword">var</span> body = CreateMessageBody ();

<span class="highlight-comment">// now to digitally sign our message body using our custom S/MIME cryptography context</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MySecureMimeContext ()) {
    <span class="highlight-comment">// Note: this assumes that "Joey" has an S/MIME signing certificate and private key</span>
    <span class="highlight-comment">// with an X.509 Subject Email identifier that matches Joey's email address.</span>
    message.Body = MultipartSigned.Create (ctx, joey, DigestAlgorithm.Sha1, body);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACACAAA");</script><p>
          You can also do your own S/MIME X.509 certificate key lookups instead of relying
          on email addresses to match up with the user's certificate.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// now to digitally sign our message body using our custom S/MIME cryptography context</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MySecureMimeContext ()) {
    <span class="highlight-keyword">var</span> certificate = GetJoeysX509Certificate ();
    <span class="highlight-keyword">var</span> signer = <span class="highlight-keyword">new</span> CmsSigner (certificate);
    signer.DigestAlgorithm = DigestAlgorithm.Sha1;

    message.Body = MultipartSigned.Create (ctx, signer, body);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="Verify"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Verifying S/MIME Digital Signatures</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
          As mentioned earlier, S/MIME typically uses a <span class="literal">multipart/signed</span>
          part to contain the signed content and the detached signature data.
        </p><p>
          A <span class="literal">multipart/signed</span> contains exactly 2 parts: the first
          <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a> is the signed
          content while the second
          <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a> is the
          detached signature and, by default, will be an
          <a href="T_MimeKit_Cryptography_ApplicationPkcs7Signature.htm">ApplicationPkcs7Signature</a>
          part.
        </p><p>
          Because the <span class="literal">multipart/signed</span> part may have been signed by
          multiple signers, it is important to verify each of the digital signatures
          (one for each signer) that are returned by the
          <a href="Overload_MimeKit_Cryptography_MultipartSigned_Verify.htm">Verify</a>
          method:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (entity <span class="highlight-keyword">is</span> MultipartSigned) {
    <span class="highlight-keyword">var</span> signed = (MultipartSigned) entity;

    <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> signature <span class="highlight-keyword">in</span> signed.Verify ()) {
        <span class="highlight-keyword">try</span> {
            <span class="highlight-keyword">bool</span> valid = signature.Verify ();

            <span class="highlight-comment">// If valid is true, then it signifies that the signed content has not been</span>
            <span class="highlight-comment">// modified since this particular signer signed the content.</span>
            <span class="highlight-comment">// </span>
            <span class="highlight-comment">// However, if it is false, then it indicates that the signed content has</span>
            <span class="highlight-comment">// been modified.</span>
        } <span class="highlight-keyword">catch</span> (DigitalSignatureVerifyException) {
            <span class="highlight-comment">// There was an error verifying the signature.</span>
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABAAA");</script><p>
          It should be noted, however, that while most S/MIME clients will use the preferred
          <span class="literal">multipart/signed</span> approach, it is possible that you may encounter an
          <span class="literal">application/pkcs7-mime</span> part with an <span class="literal">smime-type</span>
          parameter set to <span class="literal">signed-data</span>. Luckily, MimeKit can handle this
          format as well:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (entity <span class="highlight-keyword">is</span> ApplicationPkcs7Mime) {
    <span class="highlight-keyword">var</span> pkcs7 = (ApplicationPkcs7Mime) entity;

    <span class="highlight-keyword">if</span> (pkcs7.SecureMimeType == SecureMimeType.SignedData) {
        <span class="highlight-comment">// extract the original content and get a list of signatures</span>
        MimeEntity extracted;

        <span class="highlight-comment">// Note: if you are rendering the message, you'll want to render the</span>
        <span class="highlight-comment">// extracted mime part rather than the application/pkcs7-mime part.</span>
        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> signature <span class="highlight-keyword">in</span> pkcs7.Verify (<span class="highlight-keyword">out</span> extracted)) {
            <span class="highlight-keyword">try</span> {
                <span class="highlight-keyword">bool</span> valid = signature.Verify ();

                <span class="highlight-comment">// If valid is true, then it signifies that the signed content has not</span>
                <span class="highlight-comment">// been modified since this particular signer signed the content.</span>
                <span class="highlight-comment">// </span>
                <span class="highlight-comment">// However, if it is false, then it indicates that the signed content</span>
                <span class="highlight-comment">// has been modified.</span>
            } <span class="highlight-keyword">catch</span> (DigitalSignatureVerifyException) {
                <span class="highlight-comment">// There was an error verifying the signature.</span>
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="WorkingWithMessages.htm">Working with Messages</a></div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>